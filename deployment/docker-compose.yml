version: '3.8'

services:
  worker:
    build:
      context: ..
      dockerfile: deployment/Dockerfile
    container_name: callsbot-worker
    user: root
    command: ["python", "scripts/bot.py", "run"]
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - CALLSBOT_LOG_STDOUT=true
      - CALLSBOT_METRICS_ENABLED=true
      - CALLSBOT_FORCE_FALLBACK=false
      - REDIS_URL=redis://redis:6379/0
      - TELEGRAM_USER_SESSION_FILE=sessions/relay_user.session
      - TS_BLIND_BUY=true
      - USE_LIQUIDITY_FILTER=false
      - GENERAL_CYCLE_MIN_SCORE=7
      - MIN_MARKET_CAP_USD=10000
      - MAX_MARKET_CAP_USD=500000
      - MAX_MARKET_CAP_FOR_DEFAULT_ALERT=500000
      - MIN_LIQUIDITY_USD=0
      - MIN_VOLUME_24H_USD=10000
      - MIN_VOL_TO_MCAP_RATIO=0.3
      - MAX_TOP10_CONCENTRATION=30
      - MAX_BUNDLERS_PERCENT=15
      - MAX_INSIDERS_PERCENT=25
      - SMART_MONEY_SCORE_BONUS=0
    volumes:
      - ./var:/app/var
      - worker_sessions:/app/sessions
      - ./data/logs:/app/data/logs
    ports:
      - "9108:9108"
    depends_on:
      - redis
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  web:
    build:
      context: ..
      dockerfile: deployment/Dockerfile
    container_name: callsbot-web
    command: ["gunicorn", "-k", "gthread", "--threads", "4", "-w", "2", "-t", "120", "--graceful-timeout", "30", "-b", "0.0.0.0:8080", "src.server:create_app()"]
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - DASH_PORT=8080
      - CALLSBOT_LOG_STDOUT=true
      - CALLSBOT_SQL_KEY=${CALLSBOT_SQL_KEY}
    volumes:
      - ./var:/app/var
      - ./data/logs:/app/data/logs:ro
    expose:
      - "8080"
    healthcheck:
      disable: true
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # Real Trader - Uses optimized system with adaptive trailing stops and rebalancing
  trader:
    build:
      context: ..
      dockerfile: deployment/Dockerfile
    container_name: callsbot-trader
    user: root
    command: ["python", "-m", "tradingSystem.cli_optimized"]
    restart: unless-stopped  # ENABLED for live trading
    extra_hosts:
      - "quote-api.jup.ag:104.26.11.139"
      - "api.jup.ag:104.26.11.139"
    dns:
      - 8.8.8.8
      - 1.1.1.1
    env_file:
      - .env
    environment:
      - CALLSBOT_LOG_STDOUT=true
      - REDIS_URL=redis://redis:6379/0
      - TS_BLIND_BUY=true
      - TS_MIN_SCORE=0
      # Jupiter API Rate Limiting - CRITICAL FIX FOR STOP LOSS FAILURES
      # Problem: 1s price checks = 60 calls/min > 40 RPM limit
      # Solution: Conservative limits + longer cooldown = reliable sells
      - JUP_RPM_LIMIT=35              # Conservative (leave buffer for sells)
      - JUP_RATE_BUCKET=5
      - JUP_429_COOLDOWN_THRESHOLD=1  # Stop immediately on first 429
      - JUP_429_COOLDOWN_SEC=90       # Wait 90s for limit to fully reset
      - TS_FAST_EXECUTION=true
      - TS_PRIORITY_FEE_MIN_MICROLAMPORTS=470000  # ~$0.09 at $191 SOL (Axiom/BullX level)
      - TS_PRIORITY_FEE_MAX_MICROLAMPORTS=500000  # Cap at ~$0.095
      - TS_MAX_PRICE_IMPACT_BUY_PCT=25.0
      - TS_MAX_PRICE_IMPACT_SELL_PCT=50.0
      - TS_SELL_MINT=So11111111111111111111111111111111111111112
      # FIX: Match worker's liquidity filter (no filter)
      - TS_MIN_LIQUIDITY_USD=0
      # Portfolio Rebalancing (Circle Strategy) - DISABLED to match backtest
      - PORTFOLIO_REBALANCING_ENABLED=false
      - PORTFOLIO_MAX_POSITIONS=5
      - PORTFOLIO_MIN_MOMENTUM_ADVANTAGE=15.0
      - PORTFOLIO_REBALANCE_COOLDOWN=300
      - PORTFOLIO_MIN_POSITION_AGE=600
      # Late Pump Protection
      - PORTFOLIO_PROTECT_LATE_PUMPERS=true
      - PORTFOLIO_LATE_PUMP_THRESHOLD=50
      - PORTFOLIO_NEVER_REBALANCE_ABOVE=100
      # Adaptive Trailing Stops - DISABLED (has bugs, use proven fixed trails)
      - TS_ADAPTIVE_TRAILING_ENABLED=false
      - TS_EARLY_TRAIL_PCT=25.0
      - TS_MID_TRAIL_PCT=15.0
      - TS_LATE_TRAIL_PCT=12.0
      # Time-Based Exit - Automatically sell stagnant positions
      - TS_MAX_HOLD_TIME_SEC=3600
      # Circuit Breaker - DISABLED (set to very high values)
      - TS_MAX_DAILY_LOSS_PCT=1000.0
      - TS_MAX_CONSECUTIVE_LOSSES=1000
      # PROFIT OPTIMIZATION - Tighter trails, SLOWER checks (API limit fix)
      - TS_TRAIL_AGGRESSIVE=5.0    # Score 9-10: 5% trail (was 10%)
      - TS_TRAIL_DEFAULT=8.0       # Score 8: 8% trail (was 15%)
      - TS_TRAIL_CONSERVATIVE=10.0 # Score 7: 10% trail (was 20%)
      - TS_EXIT_CHECK_INTERVAL=5.0 # CRITICAL: 5s = 12 calls/min (was 1s = 60 calls/min)
    volumes:
      - ./var:/app/var
      - ./data/logs:/app/data/logs
    depends_on:
      - worker
      - web
      - redis
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # Signal Aggregator - Monitors external Telegram groups (100% isolated)
  signal-aggregator:
    build:
      context: ..
      dockerfile: deployment/Dockerfile
    container_name: callsbot-signal-aggregator
    user: root
    command: ["python", "scripts/signal_aggregator_daemon.py"]
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - CALLSBOT_LOG_STDOUT=true
      - SIGNAL_AGGREGATOR_SESSION_FILE=var/relay_user.session
    volumes:
      - ./var:/app/var
      - ./data/logs:/app/data/logs
    depends_on:
      - redis
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  tracker:
    build:
      context: ..
      dockerfile: deployment/Dockerfile
    container_name: callsbot-tracker
    user: root
    command: ["python", "scripts/track_performance.py"]
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - CALLSBOT_LOG_STDOUT=true
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - ./var:/app/var
      - ./data/logs:/app/data/logs
    depends_on:
      - worker
      - redis
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  redis:
    image: redis:7-alpine
    container_name: callsbot-redis
    restart: unless-stopped
    command: redis-server --maxmemory 256mb --maxmemory-policy allkeys-lru --save ""
    expose:
      - "6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: json-file
      options:
        max-size: "5m"
        max-file: "2"

  caddy:
    image: caddy:2
    container_name: callsbot-proxy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
    depends_on:
      - web
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

volumes:
  caddy_data:
  caddy_config:
  redis_data:
  worker_sessions:
  aggregator_sessions:
