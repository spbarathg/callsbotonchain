version: '3.8'

services:
  worker:
    build:
      context: ..
      dockerfile: deployment/Dockerfile
    container_name: callsbot-worker
    user: root
    command: ["python", "scripts/bot.py", "run"]
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - CALLSBOT_LOG_STDOUT=true
      - CALLSBOT_METRICS_ENABLED=true
      - CALLSBOT_FORCE_FALLBACK=false
      - REDIS_URL=redis://redis:6379/0
      - TELEGRAM_USER_SESSION_FILE=sessions/relay_user.session
      # ============ CRITICAL SIGNAL BOT ALIGNMENT ============
      # These MUST match trader expectations to avoid execution failures
      - MIN_MARKET_CAP_USD=50000                    # Was: 10000 (CRITICAL: match backtest)
      - MAX_MARKET_CAP_FOR_DEFAULT_ALERT=200000
      - MIN_LIQUIDITY_USD=30000                     # Was: 0 (CRITICAL: trader can't execute <30k)
      - MAX_LIQUIDITY_USD=75000                     # Data-proven sweet spot
      - USE_LIQUIDITY_FILTER=true                   # ENABLE filtering
      - GENERAL_CYCLE_MIN_SCORE=7                   # Stricter: only 7+ signals
      # ============ END CRITICAL ALIGNMENT ============
    volumes:
      - ./var:/app/var
      - worker_sessions:/app/sessions
      - ./data/logs:/app/data/logs
    ports:
      - "9108:9108"
    depends_on:
      - redis
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  web:
    build:
      context: ..
      dockerfile: deployment/Dockerfile
    container_name: callsbot-web
    command: ["gunicorn", "-k", "gthread", "--threads", "4", "-w", "2", "-t", "120", "--graceful-timeout", "30", "-b", "0.0.0.0:8080", "src.server:create_app()"]
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - DASH_PORT=8080
      - CALLSBOT_LOG_STDOUT=true
      - CALLSBOT_SQL_KEY=${CALLSBOT_SQL_KEY}
    volumes:
      - ./var:/app/var
      - ./data/logs:/app/data/logs:ro
    expose:
      - "8080"
    healthcheck:
      disable: true
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # Paper Trading - Runs automatically to simulate trading with $500
  paper_trader:
    build:
      context: ..
      dockerfile: deployment/Dockerfile
    container_name: callsbot-paper-trader
    user: root
    command: ["python", "-m", "tradingSystem.cli_paper", "--capital", "500"]
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - CALLSBOT_LOG_STDOUT=true
    volumes:
      - ./var:/app/var
      - ./data/logs:/app/data/logs
    depends_on:
      - worker
      - web
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # Real Trader - ALIGNED WITH +411% BACKTEST
  trader:
    build:
      context: ..
      dockerfile: deployment/Dockerfile
    container_name: callsbot-trader
    user: root
    command: ["python", "-m", "tradingSystem.cli_optimized"]
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - CALLSBOT_LOG_STDOUT=true
      - REDIS_URL=redis://redis:6379/0
      
      # ============ CRITICAL EXECUTION FIXES (10/21/2025) ============
      # These fix 80% Jupiter error rate (0x1789 slippage exceeded)
      - TS_SLIPPAGE_BPS=500                         # 5% (was 150/1.5%) - CRITICAL
      - TS_PRIORITY_FEE_MICROLAMPORTS=100000        # 100k (was 10k) - CRITICAL
      - TS_MAX_CONCURRENT=4                         # Match backtest (was 5)
      # ============ END CRITICAL FIXES ============
      
      # ============ RISK MANAGEMENT (Backtest-Aligned) ============
      - TS_BANKROLL_USD=500                         # Starting capital
      - TS_STOP_LOSS_PCT=15.0                       # -15% stop (matches backtest)
      - TS_TRAIL_DEFAULT=15.0                       # 15% trail for Score 8
      - TS_TRAIL_AGGRESSIVE=10.0                    # 10% trail for Score 9-10
      - TS_TRAIL_CONSERVATIVE=20.0                  # 20% trail for Score 7
      - TS_DRY_RUN=false                            # SET TO 'true' FOR TESTING
      # ============ END RISK ============
      
      # ============ ENTRY FILTERS (Match Worker!) ============
      - TS_MIN_LIQUIDITY_USD=30000                  # Was 0 (CRITICAL: must match worker)
      - TS_MAX_PRICE_IMPACT_PCT=10.0                # Reject if >10% impact
      # ============ END FILTERS ============
      
      # ============ OPTIONAL: Portfolio Rebalancing ============
      # Circle Strategy - Replace weak positions with strong ones
      - PORTFOLIO_REBALANCING_ENABLED=false         # DISABLED initially (test basics first)
      - PORTFOLIO_MAX_POSITIONS=5
      - PORTFOLIO_MIN_MOMENTUM_ADVANTAGE=15.0
      - PORTFOLIO_REBALANCE_COOLDOWN=300
      - PORTFOLIO_MIN_POSITION_AGE=600
      - PORTFOLIO_PROTECT_LATE_PUMPERS=true
      - PORTFOLIO_LATE_PUMP_THRESHOLD=50
      - PORTFOLIO_NEVER_REBALANCE_ABOVE=100
      # ============ END PORTFOLIO ============
      
      # ============ OPTIONAL: Adaptive Trailing Stops ============
      - TS_ADAPTIVE_TRAILING_ENABLED=false          # DISABLED initially (use fixed 15%)
      - TS_EARLY_TRAIL_PCT=25.0
      - TS_MID_TRAIL_PCT=15.0
      - TS_LATE_TRAIL_PCT=12.0
      # ============ END ADAPTIVE ============
      
    volumes:
      - ./var:/app/var
      - ./data/logs:/app/data/logs
    depends_on:
      - worker
      - web
      - redis
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # Signal Aggregator - Monitors external Telegram groups (100% isolated)
  signal-aggregator:
    build:
      context: ..
      dockerfile: deployment/Dockerfile
    container_name: callsbot-signal-aggregator
    user: root
    command: ["python", "scripts/signal_aggregator_daemon.py"]
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - CALLSBOT_LOG_STDOUT=true
      - SIGNAL_AGGREGATOR_SESSION_FILE=var/relay_user.session
    volumes:
      - ./var:/app/var
      - ./data/logs:/app/data/logs
    depends_on:
      - redis
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  tracker:
    build:
      context: ..
      dockerfile: deployment/Dockerfile
    container_name: callsbot-tracker
    user: root
    command: ["python", "scripts/track_performance.py"]
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - CALLSBOT_LOG_STDOUT=true
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - ./var:/app/var
      - ./data/logs:/app/data/logs
    depends_on:
      - worker
      - redis
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  redis:
    image: redis:7-alpine
    container_name: callsbot-redis
    restart: unless-stopped
    command: redis-server --maxmemory 256mb --maxmemory-policy allkeys-lru --save ""
    expose:
      - "6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: json-file
      options:
        max-size: "5m"
        max-file: "2"

  caddy:
    image: caddy:2
    container_name: callsbot-proxy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
    depends_on:
      - web
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

volumes:
  caddy_data:
  caddy_config:
  redis_data:
  worker_sessions:
  aggregator_sessions:


